"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const $ = require("jquery");
const Switch_1 = require("./navigation/Switch");
const Constants_1 = require("./Constants");
const Status_1 = require("./charts/Status");
const Doughnut_1 = require("./charts/Doughnut");
const TestSuite_1 = require("./suites/TestSuite");
const util_1 = require("util");
class Render {
    static init() {
        document.addEventListener("DOMContentLoaded", () => {
            const config = JSON.parse($("#test-config").text());
            const results = JSON.parse($("#test-results").text());
            try {
                const globalConfig = JSON.parse($("#test-global-config").text());
                const regex = new RegExp(Render.escapeRegExp(globalConfig.rootDir), "g");
                results.testResults.forEach((testResult) => {
                    testResult.testFilePath = testResult.testFilePath.replace(regex, "");
                });
            }
            catch (e) {
            }
            Render.show(results, config);
        });
    }
    static escapeRegExp(str) {
        return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
    }
    static show(results, config) {
        const labels = [Constants_1.Constants.PASSED_LABEL, Constants_1.Constants.FAILED_LABEL];
        const backgroundColor = [Constants_1.Constants.PASS, Constants_1.Constants.FAIL];
        Render.setCoverageLink(config);
        if (!config.disableCharts) {
            const suitesData = Render.buildChartsData(results.numPassedTestSuites, results.numFailedTestSuites, results.numPendingTestSuites);
            Doughnut_1.Doughnut.createChart($("#test-suites-canvas"), suitesData);
            const testsChart = Render.buildChartsData(results.numPassedTests, results.numFailedTests, results.numPendingTests);
            Doughnut_1.Doughnut.createChart($("#tests-canvas"), testsChart);
            let snapshotChart = Render.buildChartsData(results.snapshot.matched, results.snapshot.unmatched);
            snapshotChart = Render.addSnapshotChartData(results, snapshotChart);
            Doughnut_1.Doughnut.createChart($("#snapshots-canvas"), snapshotChart);
        }
        this.updateStatusArea(results);
        const tableHtml = TestSuite_1.TestSuite.create(results);
        $("#loading-info").hide();
        $("#test-results").replaceWith($(tableHtml));
        if (config.hidePassing) {
            $("#lab-passoff-switch").prop("checked", false);
            $(`.${Constants_1.Constants.PASSED_TEST}`).hide();
        }
        if (config.hideFailing) {
            $("#lab-failoff-switch").prop("checked", false);
            $(`.${Constants_1.Constants.FAILED_TEST}`).hide();
        }
        if (config.hidePassing && config.hideFailing) {
            $(`.${Constants_1.Constants.PENDING_TEST}`).hide();
        }
        const passSwitch = new Switch_1.Switch($("#lab-passoff-switch"), $("." + Constants_1.Constants.PASSED_TEST), $("#lab-failoff-switch"), $("." + Constants_1.Constants.BOTH_TEST));
        const failSwitch = new Switch_1.Switch($("#lab-failoff-switch"), $("." + Constants_1.Constants.FAILED_TEST), $("#lab-passoff-switch"), $("." + Constants_1.Constants.BOTH_TEST));
    }
    static updateStatusArea(results) {
        Status_1.Status.setResultsClass($("#test-suites-results"), results.numPassedTestSuites, results.numTotalTestSuites - results.numPassedTestSuites - results.numPendingTestSuites);
        Status_1.Status.setResultsClass($("#tests-results"), results.numPassedTests, results.numTotalTests - results.numPassedTests - results.numPendingTests);
        Status_1.Status.setResultsClass($("#snapshots-results"), results.snapshot.matched, results.snapshot.unmatched);
        if (results.snapshot.added === 0 &&
            results.snapshot.matched === 0 &&
            results.snapshot.unchecked === 0 &&
            results.snapshot.unmatched === 0 &&
            results.snapshot.updated === 0) {
            $("#snapshots-group").hide();
        }
    }
    static setCoverageLink(config) {
        if (!util_1.isNullOrUndefined(config.coverageLink)) {
            const a = $("#coverage-link");
            a.addClass("active");
            a.removeClass("disabled");
            a.attr("href", config.coverageLink);
        }
    }
    static buildChartsData(passedTests, failedTests, pendingTests) {
        const chartData = {
            labels: [],
            backgroundColor: [],
            data: [],
        };
        if (passedTests > 0) {
            chartData.labels.push(Constants_1.Constants.PASSED_LABEL);
            chartData.backgroundColor.push(Constants_1.Constants.PASS);
            chartData.data.push(passedTests);
        }
        if (failedTests > 0) {
            chartData.labels.push(Constants_1.Constants.FAILED_LABEL);
            chartData.backgroundColor.push(Constants_1.Constants.FAIL);
            chartData.data.push(failedTests);
        }
        if (pendingTests > 0) {
            chartData.labels.push(Constants_1.Constants.PENDING_LABEL);
            chartData.backgroundColor.push(Constants_1.Constants.PENDING);
            chartData.data.push(pendingTests);
        }
        return chartData;
    }
    static addSnapshotChartData(results, snapshotChart) {
        if (results.snapshot.filesAdded > 0) {
            snapshotChart.labels.push(Constants_1.Constants.ADDED_LABEL);
            snapshotChart.backgroundColor.push(Constants_1.Constants.ADDED);
            snapshotChart.data.push(results.snapshot.filesAdded);
        }
        if (results.snapshot.unchecked > 0) {
            if (results.snapshot.didUpdate) {
                snapshotChart.labels.push(Constants_1.Constants.UPDATED_SNAPSHOT_TEST_LABEL);
                snapshotChart.backgroundColor.push(Constants_1.Constants.UPDATED_SNAPSHOT_TEST);
                snapshotChart.data.push(results.snapshot.unchecked);
            }
            else {
                snapshotChart.labels.push(Constants_1.Constants.OBSOLETE_SNAPSHOT_TEST_LABEL);
                snapshotChart.backgroundColor.push(Constants_1.Constants.OBSOLETE_SNAPSHOT_TEST);
                snapshotChart.data.push(results.snapshot.unchecked);
            }
        }
        if (results.snapshot.updated > 0) {
            snapshotChart.labels.push(Constants_1.Constants.CHANGED_LABEL);
            snapshotChart.backgroundColor.push(Constants_1.Constants.CHANGED);
            snapshotChart.data.push(results.snapshot.updated);
        }
        if (results.snapshot.filesRemoved > 0) {
            if (results.snapshot.didUpdate) {
                snapshotChart.labels.push(Constants_1.Constants.REMOVED_OBSOLETE_SNAPSHOT_FILE_LABEL);
                snapshotChart.backgroundColor.push(Constants_1.Constants.REMOVED_OBSOLETE_SNAPSHOT_FILE);
                snapshotChart.data.push(results.snapshot.filesRemoved);
            }
            else {
                snapshotChart.labels.push(Constants_1.Constants.OBSOLETE_SNAPSHOT_FILE_LABEL);
                snapshotChart.backgroundColor.push(Constants_1.Constants.OBSOLETE_SNAPSHOT_FILE);
                snapshotChart.data.push(results.snapshot.filesRemoved);
            }
        }
        return snapshotChart;
    }
}
exports.Render = Render;
//# sourceMappingURL=data:application/json;base64,