"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../constants");
exports.apiErrorHeader = {
    message: `${constants_1.Constants.FRAMEWORK_DISPLAY_NAME} API Error`
};
exports.couldNotInstatiateCommandHandler = {
    message: `Could not instantiate the handler {{commandHandler}} for ` +
        `command {{definitionName}}`
};
exports.errorDetailsHeader = {
    message: "Error Details:"
};
exports.unexpectedCommandError = {
    message: "Unexpected Command Error"
};
exports.unexpectedCommandPreparationError = {
    message: "An unexpected command preparation error occurred:"
};
exports.unableToLoadRequestedProfilesError = {
    message: "Command processing cannot continue: Unable to load requested or default profiles."
};
exports.unexpectedProfileLoadError = {
    message: "An unexpected profile load error occurred:"
};
exports.profileLoadError = {
    message: `Error loading {{type}} profile: {{profileName}}.\n\n` +
        `Additional Details:\n\n`
};
exports.unexpectedProfilesLoadError = {
    message: "An unexpected error occurred while loading requested profiles:\n"
};
exports.syntaxErrorHeader = {
    message: `\nSyntax Error`
};
exports.createProfilesCommandSummary = {
    message: `Create new configuration profiles`,
};
exports.createProfilesCommandDesc = {
    message: `${exports.createProfilesCommandSummary.message}.`,
};
exports.createProfileCommandDesc = {
    message: `Create a {{type}} profile`,
};
exports.createProfileOptionDesc = {
    message: `Specifies the name of the new {{type}} profile. ` +
        `You can load this profile by using the name on commands that support the ` +
        `"--{{type}}-profile" option.`
};
exports.listProfileLoadedModulesOptionDesc = {
    message: `List {{type}} ` +
        ` profiles that are loaded as part of normal command execution. ` +
        `This will show you the default profiles being loaded.`
};
exports.listProfileVerboseOptionDesc = {
    message: `List {{type}} ` +
        ` profiles  and their contents. ` +
        `All profile details will be printed as part of command output.`
};
exports.listProfileExample = {
    message: `List profiles of type {{type}}`
};
exports.listProfileExampleShowContents = {
    message: `List profiles of type {{type}} and display their contents`
};
exports.deleteProfileNameDesc = {
    message: `Specifies the name of the {{type}} ` +
        ` profile to be deleted. ` +
        `You can also load this profile by using the name on commands that support the ` +
        `"--{{typeOption}}" option.`
};
exports.deleteProfileExample = {
    message: `Delete a {{type}} profile named {{name}}`
};
exports.validateProfileNameDesc = {
    message: `Specifies the name of the {{type}} ` +
        ` profile to be validated. ` +
        `If the --print-plan-only option is specified, then only a plan to validate the specified profile will be displayed.`
};
exports.selectProfileNameDesc = {
    message: `Specifies the name of the {{type}} ` +
        `
 profile to be used with this command. ` +
        `To see profiles which can be validated, issue the list action for this module. ` +
        `You can also load this profile by using the name on commands that support the ` +
        `"--{{typeOption}}" option.`
};
exports.createProfileOptionOverwriteDesc = {
    message: `Overwrite the {{type}} profile when a profile of the same name exists.`
};
exports.deleteProfilesCommandSummary = {
    message: `Delete existing profiles`
};
exports.deleteProfilesCommandDesc = {
    message: `${exports.deleteProfilesCommandSummary.message}.`
};
exports.deleteProfileForceOptionDesc = {
    message: `Force deletion of profile, and dependent profiles if specified. No prompt will be displayed before `
        + ` deletion occurs.`
};
exports.deleteProfileActionDesc = {
    message: `Delete a {{type}} profile.`
};
exports.deleteProfileCommandDesc = {
    message: `Delete a {{type}} profile.` +
        ` You must specify a profile name to be deleted. To find a list of available profiles for deletion, ` +
        ` issue the profiles list command. By default, you will be prompted to confirm the profile removal.`,
};
exports.deleteProfileDepsDesc = {
    message: `Set to true to delete all dependent profiles along with the {{type}} profile.` +
        `If set to true, a list of dependent profiles will be shown along with a confirmation prompt before the ` +
        `deletions occur. If set to false, only the {{type}} profile specified will be deleted.`
};
exports.showDependenciesCommandDesc = {
    message: `View all profiles which may be used within a selected group.`,
};
exports.listProfileCommandSummary = {
    message: `List existing profiles`,
};
exports.listProfileCommandDesc = {
    message: `List profiles of the type {{type}}`,
};
exports.listProfilesFoundMessage = {
    message: `The following profiles were found of the type "{{type}}":`,
};
exports.listProfilesNotFoundMessage = {
    message: `No profiles were found of the type "{{type}}".`,
};
exports.validateProfileCommandSummary = {
    message: `Test the validity of a profile`,
};
exports.validateProfileGroupDesc = {
    message: `Test the validity of your profiles.`,
};
exports.validateProfileCommandDesc = {
    message: `Test the validity of a {{type}} profile.`,
};
exports.validateProfileOptionDesc = {
    message: `Validate the state of a  group.`,
};
exports.detailProfileCommandDesc = {
    message: `Show details of a profile of a selected type.`,
};
exports.updateProfileActionDesc = {
    message: `Update a {{type}} profile`,
};
exports.updateProfileCommandSummary = {
    message: `Update existing profiles`,
};
exports.updateProfileCommandDesc = {
    message: `Update a {{type}} profile. ` +
        `You can update any property present within the profile configuration. The updated profile ` +
        `will be printed so that you can review the result of the updates.`,
};
exports.listGroupWithOnlyProfilesSummary = {
    message: `List the {{type}} profiles loaded`
};
exports.listGroupWithOnlyProfilesDefinition = {
    message: `List the {{type}} profiles loaded.`
};
exports.listGroupWithOnlyProfileDefaultDesc = {
    message: `Lists all known profiles for this command group. ` +
        `When you issue a command that requires a profile or set of ` +
        `profiles, said profiles are loaded by default (or according to override options on the command). You can use this ` +
        `command to review your configured profiles, and verify your default profile set.`
};
exports.listGroupWithOnlyProfileCommandSummary = {
    message: `List {{type}} loaded  profiles`
};
exports.listGroupWithOnlyProfileSetDesc = {
    message: `To set the default profiles, use the \" ` +
        `{{type}} ${constants_1.Constants.DEFAULT_SET_GROUP} ${constants_1.Constants.DEFAULT_SET_PROFILE_OBJECT}\" command.`
};
exports.setProfileActionSummary = {
    message: `Set which profiles are loaded by default`
};
exports.setProfileActionDesc = {
    message: `${exports.setProfileActionSummary.message}.`
};
exports.setGroupWithOnlyProfilesSummary = {
    message: `Set the default
 profiles for the {{type}} group`
};
exports.setGroupWithOnlyProfilesCommandDesc = {
    message: `The {{type}} set ${constants_1.Constants.DEFAULT_SET_PROFILE_OBJECT} command allows you to set the default profiles for ` +
        `this command group. When a {{type}} command is issued and no profile override options are ` +
        `specified, the default profiles for the command group are automatically loaded for the command based on the ` +
        `commands profile requirements.`
};
exports.setProfileOptionDesc = {
    message: `Specify a
 profile for default usage within the {{type}} group. ` +
        `When you issue commands within the {{type}} group without a profile specified as part of the command, the default ` +
        `will be loaded instead.`
};
exports.setProfileExample = {
    message: `Set the default profile for type {{type}} to the profile named '{{name}}'`
};
exports.setGroupWithOnlyProfilesListDesc = {
    message: `To view the default profiles, use the \" ` +
        `{{type}} ${constants_1.Constants.DEFAULT_LIST_GROUP} ${constants_1.Constants.DEFAULT_LIST_PROFILE_OBJECT}\" command.`
};
exports.profileCreatedSuccessfullyAndPath = {
    message: `Profile created successfully! Path:`
};
exports.profileReviewMessage = {
    message: "Review the created profile and edit if necessary using the profile update command."
};
exports.profileCreateErrorHeader = {
    message: "Profile Create Error"
};
exports.unableToCreateProfile = {
    message: "Unable to create the requested profile."
};
exports.profileCreateErrorDetails = {
    message: "Error Details: {{errorDetails}}"
};
exports.profileNotDeletedMessage = {
    message: "No profiles were deleted."
};
exports.profileDeletedSuccessfully = {
    message: "Successfully deleted the following profile(s): "
};
exports.profileDeleteErrorHeader = {
    message: "Profile Deletion Error"
};
exports.unableToDeleteProfile = {
    message: "Not all requested profiles could be deleted."
};
exports.unableToFindProfile = {
    message: "Could not find or load the supplied profile name. Error details: "
};
exports.profileDeleteErrorDetails = {
    message: "Error Details: {{errorDetails}}"
};
exports.overroteProfileMessage = {
    message: "Overwrote existing profile for {{profileOption}}."
};
exports.profileDesc = {
    message: `Configuration profiles are loaded based on the requirements ` +
        `of the command:`
};
exports.locateProfilesDesc = {
    message: `Configuration profiles are located and used by searching in the following order,` +
        ` ending the search when a profile is found:`
};
exports.profileCreatedSuccessfully = {
    message: `Profile created successfully.`
};
exports.unexpectedProfileCreationError = {
    message: `An unexpected profile creation error occurred: \n{{unexpectedError}}`
};
exports.unexpectedProfileUpdateError = {
    message: `An unexpected profile update error occurred: \n{{unexpectedError}}`
};
//# sourceMappingURL=CoreMessages.js.map