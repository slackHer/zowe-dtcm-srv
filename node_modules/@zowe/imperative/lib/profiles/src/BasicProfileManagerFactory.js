"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractProfileManagerFactory_1 = require("./abstract/AbstractProfileManagerFactory");
const BasicProfileManager_1 = require("./BasicProfileManager");
/**
 * A basic profile mananger factory - returns instances of profile managers depending on the types passed.
 * @export
 * @class BasicProfileManagerFactory
 * @extends {AbstractProfileManagerFactory<IProfileTypeConfiguration>}
 */
class BasicProfileManagerFactory extends AbstractProfileManagerFactory_1.AbstractProfileManagerFactory {
    /**
     * Creates an instance of BasicProfileManagerFactory.
     * @param {string} profilesRootDirectory - The root directory to find your profiles
     * @memberof BasicProfileManagerFactory
     */
    constructor(profilesRootDirectory, typeConfigurations) {
        super();
        this.mProfilesRootDirectory = profilesRootDirectory;
        this.mTypeConfigurations = typeConfigurations;
    }
    /**
     * Returns a new instance of the basic profile manager for the type.
     * @param {string} type - the profile type to manager.
     * @returns {BasicProfileManager<IProfileTypeConfiguration>} - The profile manager instance for the type.
     * @memberof BasicProfileManagerFactory
     */
    getManager(type) {
        return new BasicProfileManager_1.BasicProfileManager({
            type,
            profileRootDirectory: this.profilesRootDirectory,
            typeConfigurations: this.typeConfigurations
        });
    }
    /**
     * Accessor for the profiles root directory
     * @readonly
     * @private
     * @type {string}
     * @memberof BasicProfileManagerFactory
     */
    get profilesRootDirectory() {
        return this.mProfilesRootDirectory;
    }
    /**
     * Accessor for the type configurations
     * @readonly
     * @private
     * @type {IProfileTypeConfiguration[]}
     * @memberof BasicProfileManagerFactory
     */
    get typeConfigurations() {
        return this.mTypeConfigurations;
    }
}
exports.BasicProfileManagerFactory = BasicProfileManagerFactory;
//# sourceMappingURL=BasicProfileManagerFactory.js.map