"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const security_1 = require("../../security");
const path_1 = require("path");
const settings_1 = require("../../settings");
/**
 * Imperative-internal class to load overrides
 * You should not need to call this from your CLI.
 */
class OverridesLoader {
    /**
     * Apply overrides to all applicable facilities and use our defaults where
     * an override is not provided.
     *
     * @param {IImperativeConfig} config - the current {@link Imperative#loadedConfig}
     * @param {any} packageJson - the current package.json
     */
    static load(config, packageJson) {
        return __awaiter(this, void 0, void 0, function* () {
            // Initialize the Credential Manager
            yield this.loadCredentialManager(config, packageJson);
        });
    }
    /**
     * Initialize the Credential Manager using the supplied override when provided.
     *
     * @param {IImperativeConfig} config - the current {@link Imperative#loadedConfig}
     * @param {any} packageJson - the current package.json
     */
    static loadCredentialManager(config, packageJson) {
        return __awaiter(this, void 0, void 0, function* () {
            const overrides = config.overrides;
            // The manager display name used to populate the "managed by" fields in profiles
            const displayName = (overrides.CredentialManager != null
                && settings_1.AppSettings.initialized
                && settings_1.AppSettings.instance.getNamespace("overrides") != null
                && settings_1.AppSettings.instance.get("overrides", "CredentialManager") != null
                && settings_1.AppSettings.instance.get("overrides", "CredentialManager") !== false) ?
                // App settings is configured - use the plugin name for the manager name
                settings_1.AppSettings.instance.get("overrides", "CredentialManager")
                :
                    // App settings is not configured - use the CLI display name OR the package name as the manager name
                    config.productDisplayName || config.name;
            // Initialize the credential manager if an override was supplied and/or keytar was supplied in package.json
            if (overrides.CredentialManager != null || (packageJson.dependencies != null && packageJson.dependencies.keytar != null)) {
                let Manager = overrides.CredentialManager;
                if (typeof overrides.CredentialManager === "string" && !path_1.isAbsolute(overrides.CredentialManager)) {
                    Manager = path_1.resolve(process.mainModule.filename, "../", overrides.CredentialManager);
                }
                yield security_1.CredentialManagerFactory.initialize({
                    // Init the manager with the override specified OR (if null) default to keytar
                    Manager,
                    // The display name will be the plugin name that introduced the override OR it will default to the CLI name
                    displayName,
                    // The service is always the CLI name (Keytar and other plugins can use this to uniquely identify the service)
                    service: config.name,
                    // If the default is to be used, we won't implant the invalid credential manager
                    invalidOnFailure: !(Manager == null)
                });
            }
        });
    }
}
exports.OverridesLoader = OverridesLoader;
//# sourceMappingURL=OverridesLoader.js.map