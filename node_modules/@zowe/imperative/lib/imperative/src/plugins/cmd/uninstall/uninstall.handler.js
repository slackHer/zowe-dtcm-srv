"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../../../../logger/");
const PMFConstants_1 = require("../../utilities/PMFConstants");
const npm_interface_1 = require("../../utilities/npm-interface");
const error_1 = require("../../../../../error");
const utilities_1 = require("../../../../../utilities");
/**
 * The uninstall command handler for cli plugin install.
 *
 * @see {uninstallDefinition}
 */
class UninstallHandler {
    constructor() {
        /**
         * A logger for this class
         *
         * @private
         * @type {Logger}
         */
        this.console = logger_1.Logger.getImperativeLogger();
    }
    /**
     * Process the command and input.
     *
     * @param {IHandlerParameters} params Parameters supplied by yargs
     *
     * @param {string[]} [params.arguments.plugin] This is the plugin to uninstall.
     *
     * @returns {Promise<ICommandResponse>} The command response
     *
     * @throws {ImperativeError}
     */
    process(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const chalk = utilities_1.TextUtils.chalk;
            this.console.debug(`Root Directory: ${PMFConstants_1.PMFConstants.instance.PLUGIN_INSTALL_LOCATION}`);
            if (params.arguments.plugin.length === 0) {
                throw new error_1.ImperativeError({
                    msg: `${chalk.yellow.bold("Package name")} is required.`
                });
            }
            else {
                try {
                    npm_interface_1.uninstall(params.arguments.plugin);
                    params.response.console.log("Removal of the npm package(s) was successful.\n");
                }
                catch (e) {
                    throw new error_1.ImperativeError({
                        msg: "Uninstall Failed",
                        causeErrors: [e],
                        additionalDetails: e.message
                    });
                }
            }
        });
    }
}
exports.default = UninstallHandler;
//# sourceMappingURL=uninstall.handler.js.map