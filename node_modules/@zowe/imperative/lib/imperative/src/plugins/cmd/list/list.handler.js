"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../../../../logger/");
const jsonfile_1 = require("jsonfile");
const utilities_1 = require("../../../../../utilities");
const PMFConstants_1 = require("../../utilities/PMFConstants");
/**
 * The install command handler for cli plugin install.
 *
 * @see {installDefinition}
 */
class ListHandler {
    constructor() {
        /**
         * A logger for this class
         *
         * @private
         * @type {Logger}
         */
        this.log = logger_1.Logger.getImperativeLogger();
    }
    /**
     * Process the command and input.
     *
     * @param {IHandlerParameters} params Parameters supplied by yargs
     *
     * @returns {Promise<ICommandResponse>} The command response
     *
     * @throws {ImperativeError}
     */
    process(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const chalk = utilities_1.TextUtils.chalk;
            const installedPlugins = jsonfile_1.readFileSync(PMFConstants_1.PMFConstants.instance.PLUGIN_JSON);
            params.response.data.setObj(installedPlugins);
            let listOutput = "";
            let firstTime = true;
            for (const pluginName in installedPlugins) {
                if (installedPlugins.hasOwnProperty(pluginName)) {
                    // Build the console output
                    if (firstTime) {
                        listOutput = `\n${chalk.yellow.bold("Installed plugins:")} \n\n `;
                    }
                    listOutput = listOutput + `${chalk.yellow.bold("-- pluginName: ")}` +
                        `${chalk.red.bold(pluginName)} \n `;
                    listOutput = listOutput + `${chalk.yellow.bold("-- package: ")}` +
                        `${chalk.red.bold(installedPlugins[pluginName].package)} \n `;
                    listOutput = listOutput + `${chalk.yellow.bold("-- version: ")}` +
                        `${chalk.red.bold(installedPlugins[pluginName].version)} \n `;
                    listOutput = listOutput + `${chalk.yellow.bold("-- registry: ")}` +
                        installedPlugins[pluginName].registry + "\n\n";
                    // Write to the log file
                    if (firstTime) {
                        this.log.simple(" ");
                        this.log.simple("Installed plugins:");
                        this.log.simple(" ");
                        firstTime = false;
                    }
                    this.log.simple("    pluginName: " + pluginName);
                    this.log.simple("    package: " + installedPlugins[pluginName].package);
                    this.log.simple("    version: " + installedPlugins[pluginName].version);
                    this.log.simple("    registry: " + installedPlugins[pluginName].registry);
                    this.log.simple(" ");
                }
            }
            if (listOutput === "") {
                listOutput = "No plugins have been installed into your CLI application.";
            }
            // Write to the results of the list command to console
            params.response.console.log(listOutput);
        });
    }
}
exports.default = ListHandler;
//# sourceMappingURL=list.handler.js.map