"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const PMFConstants_1 = require("../PMFConstants");
const jsonfile_1 = require("jsonfile");
const logger_1 = require("../../../../../logger");
const error_1 = require("../../../../../error");
const utilities_1 = require("../../../../../utilities");
const child_process_1 = require("child_process");
const NpmFunctions_1 = require("../NpmFunctions");
const npmCmd = NpmFunctions_1.cmdToRun();
/**
 * @TODO - allow multiple packages to be uninstalled?
 * Common function that abstracts the uninstall process.
 *
 * @param {string} packageName A package name. This value is a valid npm package name.
 *
 */
function uninstall(packageName) {
    const iConsole = logger_1.Logger.getImperativeLogger();
    const chalk = utilities_1.TextUtils.chalk;
    const npmPackage = packageName;
    iConsole.debug(`Uninstalling package: ${packageName}`);
    iConsole.debug("Reading in the current configuration.");
    const installedPlugins = jsonfile_1.readFileSync(PMFConstants_1.PMFConstants.instance.PLUGIN_JSON);
    const updatedInstalledPlugins = {};
    if (installedPlugins.hasOwnProperty(packageName)) {
        // Loop through the plugins and remove the uninstalled package
        for (const pluginName in installedPlugins) {
            // Only retain the plugins that aren't being uninstalled
            if (packageName.toString() !== pluginName.toString()) {
                updatedInstalledPlugins[pluginName] = installedPlugins[pluginName];
            }
        }
    }
    else {
        throw new error_1.ImperativeError({
            msg: `${chalk.yellow.bold("Plugin name '")} ${chalk.red.bold(packageName)}' is not installed.`
        });
    }
    try {
        // We need to capture stdout but apparently stderr also gives us a progress
        // bar from the npm install.
        const pipe = ["pipe", "pipe", process.stderr];
        // Perform the npm uninstall, somehow piping stdout and inheriting stderr gives
        // some form of a half-assed progress bar. This progress bar doesn't have any
        // formatting or colors but at least I can get the output of stdout right. (comment from install handler)
        iConsole.info("Uninstalling package...this may take some time.");
        const execOutput = child_process_1.execSync(`${npmCmd} uninstall "${npmPackage}" ` +
            `--prefix ${PMFConstants_1.PMFConstants.instance.PLUGIN_INSTALL_LOCATION} -g`, {
            cwd: PMFConstants_1.PMFConstants.instance.PMF_ROOT,
            stdio: pipe
        });
        iConsole.info("Uninstall complete");
        jsonfile_1.writeFileSync(PMFConstants_1.PMFConstants.instance.PLUGIN_JSON, updatedInstalledPlugins, {
            spaces: 2
        });
        iConsole.info("Plugin successfully uninstalled.");
    }
    catch (e) {
        throw new error_1.ImperativeError({
            msg: e.message,
            causeErrors: [e]
        });
    }
}
exports.uninstall = uninstall;
//# sourceMappingURL=uninstall.js.map