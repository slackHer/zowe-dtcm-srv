"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const PMFConstants_1 = require("../PMFConstants");
const logger_1 = require("../../../../../logger");
const NpmFunctions_1 = require("../NpmFunctions");
/**
 * @TODO - allow multiple packages to be updated?
 * Common function that abstracts the update process.
 *
 * @param {string} packageName A package name. This value is a valid npm package name.
 *
 * @param {string} registry The npm registry.
 *
 */
function update(packageName, registry) {
    const iConsole = logger_1.Logger.getImperativeLogger();
    const npmPackage = packageName;
    iConsole.debug(`updating package: ${packageName}`);
    // NOTE: Using npm install in order to retrieve the version which may be updated
    iConsole.info("updating package...this may take some time.");
    const execOutput = NpmFunctions_1.installPackages(PMFConstants_1.PMFConstants.instance.PLUGIN_INSTALL_LOCATION, registry, npmPackage);
    /* We get the package name (aka plugin name)
     * from the output of the npm command.
     * The regex is meant to match: + plugin-name@version.
     */
    const stringOutput = execOutput.toString();
    iConsole.info("stringOutput = " + stringOutput);
    const regex = /\+\s(.*)@(.*)$/gm;
    const match = regex.exec(stringOutput);
    const packageVersion = match[2];
    iConsole.info("Update complete");
    // return the package version so the plugins.json file can be updated
    return packageVersion;
}
exports.update = update;
//# sourceMappingURL=update.js.map