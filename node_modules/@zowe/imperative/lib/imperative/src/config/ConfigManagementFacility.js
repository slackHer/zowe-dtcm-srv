"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const perf_timing_1 = require("@zowe/perf-timing");
const UpdateImpConfig_1 = require("../UpdateImpConfig");
const logger_1 = require("../../../logger");
/**
 * This class is the main engine for the Config Management Facility. The
 * underlying class should be treated as a singleton and should be accessed
 * via ConfigManagementFacility.instance.
 */
class ConfigManagementFacility {
    constructor() {
        /**
         * Used for internal imperative logging.
         *
         * @private
         * @type {Logger}
         */
        this.impLogger = logger_1.Logger.getImperativeLogger();
    }
    /**
     * Gets a single instance of the CMF. On the first call of
     * ConfigManagementFacility.instance, a new CMF is initialized and returned.
     * Every subsequent call will use the one that was first created.
     *
     * @returns {ConfigManagementFacility} - The newly initialized CMF object.
     */
    static get instance() {
        if (this.mInstance == null) {
            this.mInstance = new ConfigManagementFacility();
        }
        return this.mInstance;
    }
    /**
     * Initialize the CMF. Must be called to enable the various commands provided
     * by the facility.
     */
    init() {
        const timingApi = perf_timing_1.PerfTiming.api;
        if (perf_timing_1.PerfTiming.isEnabled) {
            // Marks point START
            timingApi.mark("START_CONFIG_INIT");
        }
        this.impLogger.debug("ConfigManagementFacility.init() - Start");
        // Add the config group and related commands.
        UpdateImpConfig_1.UpdateImpConfig.addCmdGrp({
            name: "config",
            type: "group",
            summary: "Manage configuration and overrides",
            description: "Manage configuration and overrides. To see all set-able options use \"list\" command.",
            children: [
                // require("./cmd/get/get.definition").getDefinition,
                require("./cmd/set/set.definition").setDefinition,
                require("./cmd/reset/reset.definition").resetDefinition,
                require("./cmd/list/list.definition").listDefinition,
                require("./cmd/get/get.definition").getDefinition,
            ]
        });
        this.impLogger.debug("ConfigManagementFacility.init() - Success");
        if (perf_timing_1.PerfTiming.isEnabled) {
            // Marks point END
            timingApi.mark("END_CONFIG_INIT");
            timingApi.measure("ConfigManagementFacility.init()", "START_CONFIG_INIT", "END_CONFIG_INIT");
        }
    }
}
exports.ConfigManagementFacility = ConfigManagementFacility;
//# sourceMappingURL=ConfigManagementFacility.js.map