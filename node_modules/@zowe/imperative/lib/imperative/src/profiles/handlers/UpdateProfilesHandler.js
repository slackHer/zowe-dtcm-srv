"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../../../../messages");
const Imperative_1 = require("../../Imperative");
const profiles_1 = require("../../../../profiles");
const constants_1 = require("../../../../constants");
const utilities_1 = require("../../../../utilities");
/**
 * Handler for the auto-generated update profile commands
 * Allows the user to simply update an existing configuration profile
 */
class UpdateProfilesHandler {
    /**
     * The process command handler for the "update profile" command.
     * @return {Promise<ICommandResponse>}: The promise to fulfill when complete.
     */
    process(commandParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            /**
             * Invoke the modules profile creator.
             */
            const profileType = commandParameters.definition.customize[profiles_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY];
            const profileSpecified = commandParameters.arguments[constants_1.Constants.PROFILE_NAME_OPTION];
            const profileUpdated = yield Imperative_1.Imperative.api.profileManager(profileType).update({
                name: profileSpecified,
                args: commandParameters.arguments,
                merge: true
            });
            commandParameters.response.console.log(messages_1.overroteProfileMessage.message, {
                profileOption: commandParameters
                    .arguments[constants_1.Constants.PROFILE_NAME_OPTION]
            });
            commandParameters.response.console.log(messages_1.profileCreatedSuccessfullyAndPath.message);
            commandParameters.response.console.log(profileUpdated.path);
            commandParameters.response.console.log("\n");
            commandParameters.response.console.log(utilities_1.TextUtils.prettyJson(profileUpdated.profile));
            commandParameters.response.console.log("\n");
            commandParameters.response.console.log(messages_1.profileReviewMessage.message);
        });
    }
}
exports.default = UpdateProfilesHandler;
//# sourceMappingURL=UpdateProfilesHandler.js.map