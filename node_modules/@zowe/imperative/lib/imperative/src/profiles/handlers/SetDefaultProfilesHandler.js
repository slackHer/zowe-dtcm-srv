"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const Imperative_1 = require("../../Imperative");
const profiles_1 = require("../../../../profiles");
const constants_1 = require("../../../../constants");
/**
 * Handler for the auto generated commands to set the default profile for a type
 * The default profile is loaded when no specific profile name is specified
 */
class SetDefaultProfilesHandler {
    /**
     * process the set default profile command arguments
     * @return {Promise<ICommandResponse>}: The promise to fulfill when complete.
     */
    process(commandParameters) {
        return new Promise((commandComplete, commandRejected) => {
            /**
             * Get the loaded module for the command being issued and set the default profile.
             */
            const profileType = commandParameters.definition.customize[profiles_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY];
            const profileSpecified = commandParameters.arguments[constants_1.Constants.PROFILE_NAME_OPTION];
            let invoked = false;
            try {
                Imperative_1.Imperative.api.profileManager(profileType).setDefault(profileSpecified);
                commandParameters.response.console.log(`The default profile for ${profileType} set to ` +
                    `${profileSpecified}`);
            }
            catch (error) {
                const err = `Error occurred while setting default profile for ` +
                    `${profileType}: ${error.message}`;
                commandParameters.response.console.error(err);
                invoked = true;
                commandRejected();
            }
            // Fulfill the promise
            if (!invoked) {
                commandComplete();
            }
        });
    }
}
exports.default = SetDefaultProfilesHandler;
//# sourceMappingURL=SetDefaultProfilesHandler.js.map