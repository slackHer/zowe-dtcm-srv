"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../../../");
const ProfilesConstants_1 = require("../../../../profiles/src/constants/ProfilesConstants");
/**
 * Handler for the auto-generated list profiles command.
 */
class ListProfilesHandler {
    /**
     * The process command handler for the "list profiles" command.
     * @return {Promise<ICommandResponse>}: The promise to fulfill when complete.
     */
    process(params) {
        return __awaiter(this, void 0, void 0, function* () {
            // Extract the profile type, profile manager, and the default profile
            const profileType = params.definition.customize[ProfilesConstants_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY];
            const profileManager = __1.Imperative.api.profileManager(profileType);
            const defaultName = profileManager.getDefaultProfileName();
            // Load all profiles for the type contained in the manager
            const loadResults = yield profileManager.loadAll({ noSecure: true, typeOnly: true });
            // Set the data object
            params.response.data.setMessage(`"${loadResults.length}" profiles loaded for type "${profileType}"`);
            params.response.data.setObj(loadResults);
            // Construct the format print list
            const print = [];
            for (const result of loadResults) {
                if (result.name === defaultName) {
                    result.name += " (default) ";
                }
                print.push({
                    name: result.name,
                    contents: result.profile
                });
            }
            // Format the results accord to the contents
            if (params.arguments.showContents) {
                params.response.format.output({
                    output: print,
                    format: "object"
                });
            }
            else {
                params.response.format.output({
                    output: print,
                    fields: ["name"],
                    format: "list"
                });
            }
        });
    }
}
exports.default = ListProfilesHandler;
//# sourceMappingURL=ListProfilesHandler.js.map