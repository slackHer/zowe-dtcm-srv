"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../../../../messages");
const Imperative_1 = require("../../Imperative");
const profiles_1 = require("../../../../profiles");
const constants_1 = require("../../../../constants");
const utilities_1 = require("../../../../utilities");
/**
 * Handler that allows creation of a profile from command line arguments. Intended for usage with the automatically
 * generated profile create commands, but can be used otherwise.
 * @export
 * @class CreateProfilesHandler
 * @implements {ICommandHandler}
 */
class CreateProfilesHandler {
    /**
     * Create a profile from command line arguments.
     * @param {IHandlerParameters} commandParameters - Standard Imperative command handler parameters - see the
     * interface for full details
     * @memberof CreateProfilesHandler
     */
    process(commandParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const profileType = commandParameters.definition.customize[profiles_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY];
            const profileManager = Imperative_1.Imperative.api.profileManager(profileType);
            const profileName = commandParameters.arguments[constants_1.Constants.PROFILE_NAME_OPTION];
            const createParms = {
                name: profileName,
                type: profileType,
                args: commandParameters.arguments,
                overwrite: commandParameters.arguments.overwrite,
                profile: {}
            };
            /**
             * Create the profile based on the command line arguments passed
             */
            const createResponse = yield profileManager.save(createParms);
            /**
             * Indicate to the user (if specified) that the profile was overwritten
             */
            if (createResponse.overwritten) {
                commandParameters.response.console.log(messages_1.overroteProfileMessage.message, {
                    profileOption: commandParameters
                        .arguments[constants_1.Constants.PROFILE_NAME_OPTION]
                });
            }
            /**
             * Formulate th remainder of the response - which
             */
            commandParameters.response.console.log(messages_1.profileCreatedSuccessfullyAndPath.message);
            commandParameters.response.console.log(createResponse.path);
            commandParameters.response.console.log("");
            commandParameters.response.console.log(utilities_1.TextUtils.prettyJson(createResponse.profile, undefined, undefined, "\n"));
            commandParameters.response.console.log(messages_1.profileReviewMessage.message);
        });
    }
}
exports.default = CreateProfilesHandler;
//# sourceMappingURL=CreateProfilesHandler.js.map