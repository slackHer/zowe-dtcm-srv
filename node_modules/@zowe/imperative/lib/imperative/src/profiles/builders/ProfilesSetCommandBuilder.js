"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const ProfilesCommandBuilder_1 = require("./ProfilesCommandBuilder");
const utilities_1 = require("../../../../utilities");
const constants_1 = require("../../../../constants");
const index_1 = require("../../../../messages/index");
const profiles_1 = require("../../../../profiles");
/**
 * Used to build "set default profile" command definitions.
 * Used automatically if you allow the "profiles" command group to be generated
 */
class ProfilesSetCommandBuilder extends ProfilesCommandBuilder_1.ProfilesCommandBuilder {
    /**
     * Gets the "action" that this command builder is building.
     * @return {string}: The "create" action string
     */
    getAction() {
        return constants_1.Constants.SET_ACTION;
    }
    /**
     * Build the full command - includes action group and object command.
     * @return {ICommandDefinition}: The command definition.
     */
    buildFull() {
        return this.buildProfileSegmentFromSchema();
    }
    /**
     * Builds only the "profile" segment from the profile schema.
     * @return {ICommandDefinition}
     */
    buildProfileSegmentFromSchema() {
        const profileCommand = {
            name: this.mProfileType + "-profile",
            aliases: [this.mProfileType],
            summary: utilities_1.TextUtils.formatMessage(index_1.setGroupWithOnlyProfilesSummary.message, { type: this.mProfileType }),
            description: utilities_1.TextUtils.formatMessage(index_1.setGroupWithOnlyProfilesCommandDesc.message, { type: this.mProfileType }),
            type: "command",
            handler: __dirname + "/../handlers/SetDefaultProfilesHandler",
            options: [],
            positionals: [{
                    name: constants_1.Constants.PROFILE_NAME_OPTION,
                    description: utilities_1.TextUtils.formatMessage(index_1.setProfileOptionDesc.message, {
                        type: this.mProfileType,
                    }),
                    type: "string",
                    required: true,
                }],
            customize: {},
            examples: [{
                    options: "profilename",
                    description: utilities_1.TextUtils.formatMessage(index_1.setProfileExample.message, {
                        type: this.mProfileType,
                        name: "profilename"
                    }),
                }
            ]
        };
        profileCommand.customize[profiles_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY] = this.mProfileType;
        return profileCommand;
    }
}
exports.ProfilesSetCommandBuilder = ProfilesSetCommandBuilder;
//# sourceMappingURL=ProfilesSetCommandBuilder.js.map