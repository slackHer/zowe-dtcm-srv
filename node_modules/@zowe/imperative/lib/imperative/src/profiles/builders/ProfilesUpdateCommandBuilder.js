"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const ProfilesCommandBuilder_1 = require("./ProfilesCommandBuilder");
const util_1 = require("util");
const constants_1 = require("../../../../constants");
const messages_1 = require("../../../../messages");
const utilities_1 = require("../../../../utilities");
const profiles_1 = require("../../../../profiles");
/**
 * Used to build profile update command definitions.
 * Used automatically if you allow the "profiles" command group to be generated
 */
class ProfilesUpdateCommandBuilder extends ProfilesCommandBuilder_1.ProfilesCommandBuilder {
    /**
     * Gets the "action" that this command builder is building.
     * @return {string}: The "create" action string
     */
    getAction() {
        return constants_1.Constants.UPDATE_ACTION;
    }
    /**
     * Build the full command - includes action group and object command.
     * @return {ICommandDefinition}: The command definition.
     */
    buildFull() {
        return this.buildProfileSegmentFromSchema();
    }
    /**
     * Builds only the "profile" segment from the profile schema.
     * @return {ICommandDefinition}
     */
    buildProfileSegmentFromSchema() {
        // clone the properties file before trying to modify them so that we don't affect the original
        const updateOnlyProperties = JSON.parse(JSON.stringify(this.mSchema.properties));
        for (const propName of Object.keys(updateOnlyProperties)) {
            // helper to tweak all nested option definitions
            // for updating the profile (marking required options
            // optional in case the user does not wish to update them)
            const processFieldsForUpdate = (properties, propertyName) => {
                const field = properties[propertyName];
                if (!util_1.isNullOrUndefined(field.optionDefinition)) {
                    field.optionDefinition.required = false;
                    field.optionDefinition.absenceImplications = null;
                    field.optionDefinition.implies = null;
                }
                if (!util_1.isNullOrUndefined(field.optionDefinitions)) {
                    for (const anOption of field.optionDefinitions) {
                        if (!util_1.isNullOrUndefined(anOption.required)) {
                            anOption.required = false;
                            anOption.absenceImplications = null;
                            anOption.implies = null;
                        }
                    }
                }
                if (field.properties != null) {
                    for (const nestedProperty of Object.keys(field.properties)) {
                        processFieldsForUpdate(field.properties, nestedProperty);
                    }
                }
            };
            processFieldsForUpdate(updateOnlyProperties, propName);
        }
        const profileCommand = {
            name: this.mProfileType + "-profile",
            aliases: [this.mProfileType],
            summary: utilities_1.TextUtils.formatMessage(messages_1.updateProfileCommandDesc.message, { type: this.mProfileType }),
            description: this.mSchema.description,
            type: "command",
            handler: __dirname + "/../handlers/UpdateProfilesHandler",
            customize: {},
            positionals: [{
                    name: constants_1.Constants.PROFILE_NAME_OPTION,
                    description: utilities_1.TextUtils.formatMessage(messages_1.createProfileOptionDesc.message, {
                        type: this.mProfileType,
                        typeOption: profiles_1.ProfileUtils.getProfileOption(this.mProfileType)
                    }),
                    type: "string",
                    required: true,
                }],
            options: this.buildOptionsFromProfileSchema(updateOnlyProperties, []),
        };
        profileCommand.customize[profiles_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY] = this.mProfileType;
        if (this.mProfileConfig.updateProfileExamples != null) {
            profileCommand.examples = this.mProfileConfig.updateProfileExamples;
        }
        // We don't want to override existing settings with defaultValue for an option
        for (const option of profileCommand.options) {
            delete option.defaultValue;
        }
        return profileCommand;
    }
}
exports.ProfilesUpdateCommandBuilder = ProfilesUpdateCommandBuilder;
//# sourceMappingURL=ProfilesUpdateCommandBuilder.js.map