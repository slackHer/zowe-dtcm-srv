"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("../../../../messages");
const constants_1 = require("../../../../constants");
const ProfilesCreateCommandBuilder_1 = require("./ProfilesCreateCommandBuilder");
const ProfilesUpdateCommandBuilder_1 = require("./ProfilesUpdateCommandBuilder");
const ProfilesDeleteCommandBuilder_1 = require("./ProfilesDeleteCommandBuilder");
const ProfilesValidateCommandBuilder_1 = require("./ProfilesValidateCommandBuilder");
const ProfilesListCommandBuilder_1 = require("./ProfilesListCommandBuilder");
const ProfilesSetCommandBuilder_1 = require("./ProfilesSetCommandBuilder");
const util_1 = require("util");
/**
 * Generate a complete group of commands for maintaining configuration profiles
 * based on provided profile definitions.
 */
class CompleteProfilesGroupBuilder {
    /**
     * Get the complete profile group of commands
     * @param {ICommandProfileTypeConfiguration[]} profiles - the profile configurations to convert to commands
     * @param {Logger} logger - logger to use in the builder classes
     * @returns {ICommandDefinition} - the complete profile group of commands
     */
    static getProfileGroup(profiles, logger) {
        const profileGroup = {
            name: constants_1.Constants.PROFILE_GROUP,
            description: "Create and manage configuration profiles",
            type: "group",
            children: []
        };
        const createGroup = {
            name: constants_1.Constants.CREATE_ACTION,
            description: messages_1.createProfilesCommandDesc.message,
            summary: messages_1.createProfilesCommandSummary.message,
            aliases: ["cre"],
            type: "group",
            children: [],
        };
        const deleteGroup = {
            name: constants_1.Constants.DELETE_ACTION,
            description: messages_1.deleteProfilesCommandDesc.message,
            summary: messages_1.deleteProfilesCommandSummary.message,
            aliases: ["rm"],
            type: "group",
            children: [],
        };
        const setGroup = {
            name: constants_1.Constants.SET_ACTION,
            summary: messages_1.setProfileActionSummary.message,
            description: messages_1.setProfileActionDesc.message,
            type: "group",
            aliases: ["set"],
            children: [],
        };
        const updateGroup = {
            name: constants_1.Constants.UPDATE_ACTION,
            description: messages_1.updateProfileCommandDesc.message,
            summary: messages_1.updateProfileCommandSummary.message,
            aliases: ["upd"],
            type: "group",
            children: [],
        };
        const validateGroup = {
            name: constants_1.Constants.VALIDATE_ACTION,
            description: messages_1.validateProfileGroupDesc.message,
            summary: messages_1.validateProfileCommandSummary.message,
            aliases: ["val"],
            type: "group",
            children: [],
        };
        const listGroup = {
            name: constants_1.Constants.LIST_ACTION,
            description: messages_1.listProfileCommandDesc.message,
            summary: messages_1.listProfileCommandSummary.message,
            aliases: ["ls"],
            type: "group",
            children: [],
        };
        const cmdGroups = [];
        for (const profile of profiles) {
            const createCommandAction = new ProfilesCreateCommandBuilder_1.ProfilesCreateCommandBuilder(profile.type, logger, profile);
            const updateCommandAction = new ProfilesUpdateCommandBuilder_1.ProfilesUpdateCommandBuilder(profile.type, logger, profile);
            const deleteCommandAction = new ProfilesDeleteCommandBuilder_1.ProfilesDeleteCommandBuilder(profile.type, logger, profile);
            const validateCommandAction = new ProfilesValidateCommandBuilder_1.ProfilesValidateCommandBuilder(profile.type, logger, profile);
            const listCommandAction = new ProfilesListCommandBuilder_1.ProfilesListCommandBuilder(profile.type, logger, profile);
            const setCommandAction = new ProfilesSetCommandBuilder_1.ProfilesSetCommandBuilder(profile.type, logger, profile);
            updateGroup.children.push(updateCommandAction.build());
            deleteGroup.children.push(deleteCommandAction.build());
            // validate profile is optional depending on if the profile has a validation plan
            const validateCommandResult = validateCommandAction.build();
            if (!util_1.isNullOrUndefined(validateCommandResult)) {
                validateGroup.children.push(validateCommandResult);
            }
            listGroup.children.push(listCommandAction.build());
            createGroup.children.push(createCommandAction.build());
            setGroup.children.push(setCommandAction.build());
        }
        profileGroup.children.push(createGroup, updateGroup, deleteGroup, listGroup, setGroup);
        if (validateGroup.children.length > 0) {
            // don't bother to add validation commands unless some plans have been providedl
            profileGroup.children.push(validateGroup);
        }
        return profileGroup;
    }
}
exports.CompleteProfilesGroupBuilder = CompleteProfilesGroupBuilder;
//# sourceMappingURL=CompleteProfilesGroupBuilder.js.map