"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const ProfilesCommandBuilder_1 = require("./ProfilesCommandBuilder");
const constants_1 = require("../../../../constants");
const messages_1 = require("../../../../messages");
const utilities_1 = require("../../../../utilities");
const util_1 = require("util");
const profiles_1 = require("../../../../profiles");
/**
 * Used to build profile validate command definitions.
 * Used automatically if you allow the "profiles" command group to be generated
 */
class ProfilesValidateCommandBuilder extends ProfilesCommandBuilder_1.ProfilesCommandBuilder {
    /**
     * Construct the builder based on the schema.
     * @param profileType - the name of the profile type to build the command for
     * @param {Logger} logger - logger to use while building command definition
     * @param {ICommandProfileTypeConfiguration} profileConfig: Imperative profile configuration for this type of profile
     */
    constructor(profileType, logger, profileConfig) {
        super(profileType, logger, profileConfig);
    }
    /**
     * Gets the "action" that this command builder is building.
     * @return {string}: The "create" action string
     */
    getAction() {
        return constants_1.Constants.VALIDATE_ACTION;
    }
    /**
     * Build the full command - includes action group and object command.
     * @return {ICommandDefinition}: The command definition.
     */
    buildFull() {
        return this.buildProfileSegmentFromSchema();
    }
    /**
     * Builds only the "profile" segment from the profile schema.
     * @return {ICommandDefinition}
     */
    buildProfileSegmentFromSchema() {
        if (util_1.isNullOrUndefined(this.mProfileConfig.validationPlanModule)) {
            return undefined;
        }
        const profileCommand = {
            name: this.mProfileType + "-profile",
            aliases: [this.mProfileType],
            summary: utilities_1.TextUtils.formatMessage(messages_1.validateProfileCommandDesc.message, { type: this.mProfileType }),
            description: utilities_1.TextUtils.formatMessage(messages_1.validateProfileCommandDesc.message, { type: this.mProfileType }),
            type: "command",
            handler: __dirname + "/../handlers/ValidateProfileHandler",
            customize: {},
            options: [profiles_1.ProfileValidator.PRINT_PLAN_OPTION],
            positionals: [{
                    name: constants_1.Constants.PROFILE_NAME_OPTION,
                    description: utilities_1.TextUtils.formatMessage(messages_1.deleteProfileNameDesc.message, {
                        type: this.mProfileType,
                        typeOption: profiles_1.ProfileUtils.getProfileOption(this.mProfileType)
                    }),
                    type: "string",
                    required: false
                }]
        };
        profileCommand.customize[profiles_1.ProfilesConstants.PROFILES_COMMAND_TYPE_KEY] = this.mProfileType;
        return profileCommand;
    }
}
exports.ProfilesValidateCommandBuilder = ProfilesValidateCommandBuilder;
//# sourceMappingURL=ProfilesValidateCommandBuilder.js.map