"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const profiles_1 = require("../../../profiles");
const cmd_1 = require("../../../cmd");
class ImperativeApi {
    constructor(mApis, mConfig, mHome) {
        this.mApis = mApis;
        this.mConfig = mConfig;
        this.mHome = mHome;
        this.mCustomLoggerMap = {};
    }
    /**
     * Returns the imperative logger API object
     * @returns {Logger}: The imperative logger api object.
     */
    get imperativeLogger() {
        return this.mApis.imperativeLogger;
    }
    /**
     * Returns an imperative app's logger API object
     * @returns {Logger}: The imperative app's logger api object.
     */
    get appLogger() {
        return this.mApis.appLogger;
    }
    /**
     * Retrieve a named custom logger that has been configured
     * @param {string} name - the name of the custom logger
     * @returns {Logger} the configured logger, if it exists
     */
    additionalLogger(name) {
        return this.mCustomLoggerMap[name];
    }
    /**
     * Register a logger with the Imperative API
     * Mostly used internally in Imperative
     * @param {string} name - the name of the logger to register
     * @param {Logger} logger - the logger to store
     */
    addAdditionalLogger(name, logger) {
        this.mCustomLoggerMap[name] = logger;
    }
    /**
     * Return an instance of a profile manager for a given profile type
     * See ProfileManager.ts for more details
     */
    profileManager(type) {
        return new cmd_1.CliProfileManager({
            type,
            typeConfigurations: this.mConfig.profiles,
            profileRootDirectory: profiles_1.ProfileUtils.constructProfilesRootDirectory(this.mHome),
            logger: this.imperativeLogger,
            productDisplayName: this.mConfig.productDisplayName
        });
    }
}
exports.ImperativeApi = ImperativeApi;
//# sourceMappingURL=ImperativeApi.js.map