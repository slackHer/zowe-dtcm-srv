"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractCredentialManager_1 = require("./abstract/AbstractCredentialManager");
const BadCredentialManagerError_1 = require("./errors/BadCredentialManagerError");
/**
 * **NOTE** THIS CLASS SHOULD NOT BE EXPORTED FOR PUBLIC CONSUMPTION.
 *
 * This class is the fallback class when a credential manager fails to initialize.
 * All methods in this class must throw te error passed in by the constructor.
 */
class InvalidCredentialManager extends AbstractCredentialManager_1.AbstractCredentialManager {
    /**
     * Construct the credential manager object.
     * @param service A service that needs to be passed to the superclass
     * @param causeError The load failure that has occurred
     */
    constructor(service, causeError) {
        super(service, "Imperative Invalid Credential Manager");
        this.service = service;
        this.causeError = causeError;
    }
    deleteCredentials(account) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new BadCredentialManagerError_1.BadCredentialManagerError(this.causeError);
        });
    }
    loadCredentials(account) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new BadCredentialManagerError_1.BadCredentialManagerError(this.causeError);
        });
    }
    saveCredentials(account, credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new BadCredentialManagerError_1.BadCredentialManagerError(this.causeError);
        });
    }
}
exports.InvalidCredentialManager = InvalidCredentialManager;
//# sourceMappingURL=InvalidCredentialManager.js.map