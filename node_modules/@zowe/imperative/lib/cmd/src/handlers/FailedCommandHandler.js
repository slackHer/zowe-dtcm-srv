"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ImperativeError_1 = require("../../../error/src/ImperativeError");
/**
 * Handler used to respond to unexpected errors
 */
class FailedCommandHandler {
    process(params) {
        return __awaiter(this, void 0, void 0, function* () {
            if (params.arguments.error && params.arguments.failureMessage.indexOf("syntax") === -1) {
                // don't print the stack if it's just a syntax error
                params.response.console.error(params.arguments.error.stack);
            }
            const additionalDetails = params.arguments.error ? params.arguments.error.message : undefined;
            const msg = (additionalDetails == null) ? params.arguments.failureMessage : additionalDetails + "\n"
                + params.arguments.failureMessage;
            const failedCommandError = {
                msg,
                causeErrors: params.arguments.error ? params.arguments.error : undefined,
                additionalDetails
            };
            params.response.data.setMessage(params.arguments.failureMessage + ": " + failedCommandError.additionalDetails);
            throw new ImperativeError_1.ImperativeError(failedCommandError);
        });
    }
}
exports.default = FailedCommandHandler;
//# sourceMappingURL=FailedCommandHandler.js.map