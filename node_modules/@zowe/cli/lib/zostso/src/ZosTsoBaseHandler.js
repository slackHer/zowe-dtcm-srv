"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ZosmfBaseHandler_1 = require("../../zosmf/src/ZosmfBaseHandler");
class ZosTsoBaseHandler extends ZosmfBaseHandler_1.ZosmfBaseHandler {
    /**
     * This will grab the arguments and create the tso parameter object for APIs before
     * invoking the actual TSO handler.
     * {@link ZosmfBaseHandler#processWithSession} method.
     *
     * @param {IHandlerParameters} params Command parameters sent by imperative.
     *
     * @returns {Promise<void>}
     */
    process(params) {
        const _super = Object.create(null, {
            process: { get: () => super.process }
        });
        return __awaiter(this, void 0, void 0, function* () {
            // Populate the start parameters from the arguments
            this.mTsoStart = {
                logonProcedure: params.arguments.logonProcedure,
                characterSet: params.arguments.characterSet,
                codePage: params.arguments.codePage,
                rows: params.arguments.rows,
                columns: params.arguments.columns,
                account: params.arguments.account,
                regionSize: params.arguments.regionSize
            };
            // Call the super to invoke the handler and setup a zosmf session
            yield _super.process.call(this, params);
        });
    }
}
exports.ZosTsoBaseHandler = ZosTsoBaseHandler;
//# sourceMappingURL=ZosTsoBaseHandler.js.map