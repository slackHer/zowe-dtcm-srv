"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const imperative_1 = require("@zowe/imperative");
const list_1 = require("../../../api/methods/list");
const ZosFilesBase_handler_1 = require("../../ZosFilesBase.handler");
/**
 * Handler to list a data sets
 * @export
 */
class DataSetHandler extends ZosFilesBase_handler_1.ZosFilesBaseHandler {
    processWithSession(commandParameters, session) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield list_1.List.dataSet(session, commandParameters.arguments.dataSetName, {
                volume: commandParameters.arguments.volumeSerial,
                attributes: commandParameters.arguments.attributes,
                maxLength: commandParameters.arguments.maxLength
            });
            if (commandParameters.arguments.attributes && response.apiResponse.items.length > 0) {
                commandParameters.response.console.log(imperative_1.TextUtils.prettyJson(response.apiResponse.items));
            }
            else {
                response.apiResponse.items.forEach((mem) => commandParameters.response.console.log(mem.dsname));
            }
            return response;
        });
    }
}
exports.default = DataSetHandler;
//# sourceMappingURL=DataSet.handler.js.map