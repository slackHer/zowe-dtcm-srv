"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ZosFilesBase_handler_1 = require("../../ZosFilesBase.handler");
const create_1 = require("../../../api/methods/create");
/**
 * Handler to create a z/OS file system
 */
class ZfsHandler extends ZosFilesBase_handler_1.ZosFilesBaseHandler {
    processWithSession(commandParameters, session) {
        return __awaiter(this, void 0, void 0, function* () {
            // collect the options from our command line arguments into an object
            const createZfsOptions = {
                owner: commandParameters.arguments.owner,
                group: commandParameters.arguments.group,
                perms: commandParameters.arguments.perms,
                cylsPri: commandParameters.arguments.cylsPri,
                cylsSec: commandParameters.arguments.cylsSec,
                storeclass: commandParameters.arguments.storageClass,
                mgntclass: commandParameters.arguments.managementClass,
                dataclass: commandParameters.arguments.dataClass,
                volumes: commandParameters.arguments.volumes,
                timeout: commandParameters.arguments.timeout
            };
            return create_1.Create.zfs(session, commandParameters.arguments.fileSystemName, createZfsOptions);
        });
    }
}
exports.default = ZfsHandler;
//# sourceMappingURL=zfs.handler.js.map