"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const zosmf_1 = require("../../../zosmf");
/**
 * This class is used by the various zosfiles handlers as the base class for their implementation.
 * All handlers within zosfiles should extend this class.
 *
 * This class should not be used outside of the zosfiles package.
 *
 * @private
 */
class ZosFilesBaseHandler {
    /**
     * This will grab the zosmf profile and create a session before calling the subclass
     * {@link ZosFilesBaseHandler#processWithSession} method.
     *
     * @param {IHandlerParameters} commandParameters Command parameters sent by imperative.
     *
     * @returns {Promise<void>}
     */
    process(commandParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const profile = commandParameters.profiles.get("zosmf", false);
            const session = zosmf_1.ZosmfSession.createBasicZosmfSessionFromArguments(commandParameters.arguments);
            const response = yield this.processWithSession(commandParameters, session, profile);
            commandParameters.response.progress.endBar(); // end any progress bars
            // Print out the response
            if (response.commandResponse) {
                commandParameters.response.console.log(response.commandResponse);
            }
            // Return as an object when using --response-format-json
            commandParameters.response.data.setObj(response);
        });
    }
}
exports.ZosFilesBaseHandler = ZosFilesBaseHandler;
//# sourceMappingURL=ZosFilesBase.handler.js.map