"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rest_1 = require("../../../rest");
const imperative_1 = require("@zowe/imperative");
const ProvisioningValidator_1 = require("./ProvisioningValidator");
const ProvisioningConstants_1 = require("./ProvisioningConstants");
/**
 * Provision a published software service template.
 * @export
 * @class ProvisionPublishedTemplate
 */
class ProvisionPublishedTemplate {
    /**
     * Provision a published software service template only with account number parameter.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} zOSMFVersion - the URI path variable that identifies the version of the z/OSMF software services template service.
     *                              The following value is valid: 1.0.
     * @param {string} templateName - the name of published software service template.
     * @param {string} account - account information to use in the JCL JOB statement.
     * @returns {Promise<IProvisionTemplateResponse>} z/OSMF response object, @see {IProvisionTemplateResponse}
     * @memberof ProvisionPublishedTemplate
     */
    static provisionTemplateCommon(session, zOSMFVersion, templateName, account) {
        return __awaiter(this, void 0, void 0, function* () {
            ProvisioningValidator_1.ProvisioningValidator.validateSession(session);
            ProvisioningValidator_1.ProvisioningValidator.validateNotEmptyString(zOSMFVersion, ProvisioningConstants_1.nozOSMFVersion.message);
            ProvisioningValidator_1.ProvisioningValidator.validateNotEmptyString(templateName, ProvisioningConstants_1.noTemplateName.message);
            ProvisioningValidator_1.ProvisioningValidator.validateNotEmptyString(account, ProvisioningConstants_1.noAccountInfo.message);
            let resourcesQuery = `${ProvisioningConstants_1.ProvisioningConstants.RESOURCE}/${zOSMFVersion}/`;
            resourcesQuery += `${ProvisioningConstants_1.ProvisioningConstants.TEMPLATES_RESOURCES}/${templateName}/`;
            resourcesQuery += `${ProvisioningConstants_1.ProvisioningConstants.ACTIONS_RESOURCES}/${ProvisioningConstants_1.ProvisioningConstants.RESOURCE_PROVISION_RUN}`;
            return rest_1.ZosmfRestClient.postExpectJSON(session, resourcesQuery, [imperative_1.Headers.APPLICATION_JSON], { "account-info": account });
        });
    }
    /**
     * Provision a published software service template, with optional parameters if passed.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} zOSMFVersion - the URI path variable that identifies the version of the z/OSMF software services template service.
     *                              The following value is valid: 1.0.
     * @param {string} templateName - the name of published software service template.
     * @param {IProvisionOptionals} optionalParms - optional parameters for z/OSMF rest call, @see {IProvisionOptionals}.
     * @returns {Promise<IProvisionTemplateResponse>} z/OSMF response object, @see {IProvisionTemplateResponse}
     * @memberof ProvisionPublishedTemplate
     */
    static provisionTemplate(session, zOSMFVersion, templateName, optionalParms) {
        return __awaiter(this, void 0, void 0, function* () {
            ProvisioningValidator_1.ProvisioningValidator.validateSession(session);
            ProvisioningValidator_1.ProvisioningValidator.validateNotEmptyString(zOSMFVersion, ProvisioningConstants_1.nozOSMFVersion.message);
            ProvisioningValidator_1.ProvisioningValidator.validateNotEmptyString(templateName, ProvisioningConstants_1.noTemplateName.message);
            let resourcesQuery = `${ProvisioningConstants_1.ProvisioningConstants.RESOURCE}/${zOSMFVersion}/`;
            resourcesQuery += `${ProvisioningConstants_1.ProvisioningConstants.TEMPLATES_RESOURCES}/${templateName}/`;
            resourcesQuery += `${ProvisioningConstants_1.ProvisioningConstants.ACTIONS_RESOURCES}/${ProvisioningConstants_1.ProvisioningConstants.RESOURCE_PROVISION_RUN}`;
            if (optionalParms) {
                return rest_1.ZosmfRestClient.postExpectJSON(session, resourcesQuery, [imperative_1.Headers.APPLICATION_JSON], optionalParms);
            }
            else {
                return rest_1.ZosmfRestClient.postExpectJSON(session, resourcesQuery, [imperative_1.Headers.APPLICATION_JSON]);
            }
        });
    }
}
exports.ProvisionPublishedTemplate = ProvisionPublishedTemplate;
//# sourceMappingURL=ProvisionPublishedTemplate.js.map