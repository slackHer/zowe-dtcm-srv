import { AbstractSession } from "@zowe/imperative";
import { IProvisionTemplateResponse } from "./doc/zosmf/IProvisionTemplateResponse";
import { IProvisionOptionals } from "./doc/input/IProvisionOptionals";
/**
 * Provision a published software service template.
 * @export
 * @class ProvisionPublishedTemplate
 */
export declare class ProvisionPublishedTemplate {
    /**
     * Provision a published software service template only with account number parameter.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} zOSMFVersion - the URI path variable that identifies the version of the z/OSMF software services template service.
     *                              The following value is valid: 1.0.
     * @param {string} templateName - the name of published software service template.
     * @param {string} account - account information to use in the JCL JOB statement.
     * @returns {Promise<IProvisionTemplateResponse>} z/OSMF response object, @see {IProvisionTemplateResponse}
     * @memberof ProvisionPublishedTemplate
     */
    static provisionTemplateCommon(session: AbstractSession, zOSMFVersion: string, templateName: string, account: string): Promise<IProvisionTemplateResponse>;
    /**
     * Provision a published software service template, with optional parameters if passed.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} zOSMFVersion - the URI path variable that identifies the version of the z/OSMF software services template service.
     *                              The following value is valid: 1.0.
     * @param {string} templateName - the name of published software service template.
     * @param {IProvisionOptionals} optionalParms - optional parameters for z/OSMF rest call, @see {IProvisionOptionals}.
     * @returns {Promise<IProvisionTemplateResponse>} z/OSMF response object, @see {IProvisionTemplateResponse}
     * @memberof ProvisionPublishedTemplate
     */
    static provisionTemplate(session: AbstractSession, zOSMFVersion: string, templateName: string, optionalParms?: IProvisionOptionals): Promise<IProvisionTemplateResponse>;
}
