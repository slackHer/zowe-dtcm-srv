"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const imperative_1 = require("@zowe/imperative");
const util_1 = require("util");
/**
 * Utility Methods for Brightside
 * @export
 */
class SshSession {
    /**
     * Creates an instance of AbstractSession.
     * @param {ISshSession} session: SshSession parameter object
     */
    constructor(mISshSession) {
        this.mISshSession = mISshSession;
        mISshSession = this.buildSession(mISshSession);
    }
    /**
     * Obtain session info and defaults
     * @readonly
     * @type {ISession}
     * @memberof AbstractSession
     */
    get ISshSession() {
        return this.mISshSession;
    }
    /**
     * Given a z/OS SSH profile, create a SSH Client Session.
     * @static
     * @param {IProfile} profile - The SSH profile contents
     * @returns {Session} - A session for usage in the SSH Client
     */
    static createBasicSshSession(profile) {
        this.log.debug("Creating a z/OS SSH session from the profile named %s", profile.name);
        return new SshSession({
            hostname: profile.host,
            port: profile.port,
            user: profile.user,
            password: profile.password,
            privateKey: profile.privateKey,
            keyPassphrase: profile.keyPassphrase,
            handshakeTimeout: profile.handshakeTimeout
        });
    }
    /**
     * Given command line arguments, create a SSH Client Session.
     * @static
     * @param {IProfile} args - The arguments specified by the user
     * @returns {SshSession} - A session for usage in the SSH Client
     */
    static createBasicSshSessionFromArguments(args) {
        this.log.debug("Creating a z/OS SSH session from arguments");
        return new SshSession({
            hostname: args.host,
            port: args.port,
            user: args.user,
            password: args.password,
            privateKey: args.privateKey,
            keyPassphrase: args.keyPassphrase,
            handshakeTimeout: args.handshakeTimeout
        });
    }
    static get log() {
        return imperative_1.Logger.getAppLogger();
    }
    /**
     * Builds an ISshSession so all required pieces are filled in
     * @private
     * @param {ISession} session - the fully populated session
     * @memberof AbstractSession
     */
    buildSession(session) {
        const populatedSession = session;
        // set port if not set
        if (util_1.isNullOrUndefined(populatedSession.port)) {
            populatedSession.port = SshSession.DEFAULT_SSH_PORT;
        }
        return populatedSession;
    }
}
/**
 * Default ssh port 22
 * @static
 * @memberof AbstractSession
 */
SshSession.DEFAULT_SSH_PORT = 22;
SshSession.SSH_CONNECTION_OPTION_GROUP = "z/OS Ssh Connection Options";
/**
 * Option used in profile creation and commands for hostname for z/OS SSH
 */
SshSession.SSH_OPTION_HOST = {
    name: "host",
    aliases: ["H"],
    description: "The z/OS SSH server host name.",
    type: "string",
    required: true,
    group: SshSession.SSH_CONNECTION_OPTION_GROUP
};
/**
 * Option used in profile creation and commands for port for z/OS SSH
 */
SshSession.SSH_OPTION_PORT = {
    name: "port",
    aliases: ["P"],
    description: "The z/OS SSH server port.",
    type: "number",
    defaultValue: 22,
    group: SshSession.SSH_CONNECTION_OPTION_GROUP
};
/**
 * Option used in profile creation and commands for username / ID  for z/OS SSH
 */
SshSession.SSH_OPTION_USER = {
    name: "user",
    aliases: ["u"],
    description: "Mainframe user name, which can be the same as your TSO login.",
    type: "string",
    required: true,
    group: SshSession.SSH_CONNECTION_OPTION_GROUP
};
/**
 * Option used in profile creation and commands for password/passphrase for z/OS SSH
 */
SshSession.SSH_OPTION_PASSWORD = {
    name: "password",
    aliases: ["pass", "pw"],
    description: "Mainframe password, which can be the same as your TSO password.",
    type: "string",
    group: SshSession.SSH_CONNECTION_OPTION_GROUP
};
/**
 * Option used in profile creation and commands for private key path
 */
SshSession.SSH_OPTION_PRIVATEKEY = {
    name: "privateKey",
    aliases: ["key", "pk"],
    description: "Path to a file containing your private key, that must match a public key stored in the server for authentication",
    type: "string",
    group: SshSession.SSH_CONNECTION_OPTION_GROUP,
};
/**
 * Option used in profile creation and commands for passphrase for private key
 */
SshSession.SSH_OPTION_KEYPASSPHRASE = {
    name: "keyPassphrase",
    aliases: ["passphrase", "kp"],
    description: "Private key passphrase, which unlocks the private key.",
    type: "string",
    group: SshSession.SSH_CONNECTION_OPTION_GROUP,
};
/**
 * Option used in profile creation and commands for passphrase for private key
 */
SshSession.SSH_OPTION_HANDSHAKETIMEOUT = {
    name: "handshakeTimeout",
    aliases: ["timeout", "to"],
    description: "How long in milliseconds to wait for the SSH handshake to complete.",
    type: "number",
    group: SshSession.SSH_CONNECTION_OPTION_GROUP,
};
/**
 * Options related to connecting to z/OS SSH
 * These options can be filled in if the user creates a profile
 */
SshSession.SSH_CONNECTION_OPTIONS = [
    SshSession.SSH_OPTION_HOST,
    SshSession.SSH_OPTION_PORT,
    SshSession.SSH_OPTION_USER,
    SshSession.SSH_OPTION_PASSWORD,
    SshSession.SSH_OPTION_PRIVATEKEY,
    SshSession.SSH_OPTION_KEYPASSPHRASE,
    SshSession.SSH_OPTION_HANDSHAKETIMEOUT
];
exports.SshSession = SshSession;
//# sourceMappingURL=SshSession.js.map