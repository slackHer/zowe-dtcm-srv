"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const imperative_1 = require("@zowe/imperative");
const rest_1 = require("../../../rest");
const WorkflowConstants_1 = require("./WorkflowConstants");
const WorkflowValidator_1 = require("./WorkflowValidator");
class PropertiesWorkflow {
    /**
     * This operation returns properties of the workflow.
     * Parameters indicators are mandatory,request can include steps and variables indicator for requested result.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} workflowfKey - Key of workflow.
     * @param {string} zOSMFVersion - the URI path that identifies the version of the provisioning service.
     * @param {boolean} steps - Optional parameter for listing steps properties.
     * @param {boolean} variables - Optional parameter for listing variables properties.
     * @returns {Promise<IWorkflowInfo>} z/OSMF response object
     * @memberof Properties
     */
    // main method
    static getWorkflowProperties(session, workflowKey, zOSMFVersion = WorkflowConstants_1.WorkflowConstants.ZOSMF_VERSION, steps, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            WorkflowValidator_1.WorkflowValidator.validateSession(session);
            WorkflowValidator_1.WorkflowValidator.validateNotEmptyString(zOSMFVersion, WorkflowConstants_1.nozOSMFVersion.message);
            let wfKey;
            WorkflowValidator_1.WorkflowValidator.validateNotEmptyString(workflowKey, WorkflowConstants_1.noWorkflowKey.message);
            wfKey = workflowKey;
            let resourcesQuery = `${WorkflowConstants_1.WorkflowConstants.RESOURCE}/${zOSMFVersion}/`;
            resourcesQuery += `${WorkflowConstants_1.WorkflowConstants.WORKFLOW_RESOURCE}/${wfKey}`;
            if (steps && variables) {
                resourcesQuery += `?${WorkflowConstants_1.WorkflowConstants.returnData}=${WorkflowConstants_1.WorkflowConstants.steps},${WorkflowConstants_1.WorkflowConstants.variables}`;
            }
            else if (steps) {
                resourcesQuery += `?${WorkflowConstants_1.WorkflowConstants.returnData}=${WorkflowConstants_1.WorkflowConstants.steps}`;
            }
            else if (variables) {
                resourcesQuery += `?${WorkflowConstants_1.WorkflowConstants.returnData}=${WorkflowConstants_1.WorkflowConstants.variables}`;
            }
            return rest_1.ZosmfRestClient.getExpectJSON(session, resourcesQuery, [imperative_1.Headers.APPLICATION_JSON]);
        });
    }
    /**
     * Processes the z/OSMF workflow step info
     * in a recursive manner.
     *
     * @protected
     * @static
     * @param {IStepInfo[]} steps z/OSMF steps to be processed
     * @returns {Promise<IStepSummary[]>} Array of z/OSMF step summary objects
     * @memberof PropertiesWorkflow
     */
    static processStepSummaries(steps) {
        return __awaiter(this, void 0, void 0, function* () {
            let stepSummaries = [];
            for (const step of steps) {
                let miscValue = "N/A";
                if (step.submitAs && step.submitAs.match(/.*JCL/)) {
                    if (step.jobInfo && step.jobInfo.jobstatus) {
                        miscValue = step.jobInfo.jobstatus.jobid;
                    }
                }
                else if (step.template) {
                    miscValue = "TSO";
                }
                else if (step.isRestStep) {
                    miscValue = `HTTP ${step.actualStatusCode}`;
                }
                const stepSummary = {
                    stepNumber: step.stepNumber,
                    name: step.name,
                    state: step.state,
                    misc: miscValue,
                    autoEnable: step.autoEnable,
                    description: step.description,
                    isRestStep: step.isRestStep,
                    optional: step.optional,
                    runAsUser: step.runAsUser,
                    title: step.title,
                    userDefined: step.userDefined,
                };
                stepSummaries.push(stepSummary);
                if (step.steps) {
                    const subSteps = yield PropertiesWorkflow.processStepSummaries(step.steps);
                    stepSummaries = stepSummaries.concat(subSteps);
                }
            }
            return stepSummaries;
        });
    }
}
exports.PropertiesWorkflow = PropertiesWorkflow;
//# sourceMappingURL=Properties.js.map