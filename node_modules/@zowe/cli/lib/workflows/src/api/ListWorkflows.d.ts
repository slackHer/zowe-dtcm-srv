import { AbstractSession } from "@zowe/imperative";
/**
 * Get list of workflows from registry.
 * @export
 * @class ListWorkflows
 */
export declare class ListWorkflows {
    /**
     * This operation returns list of workflows.
     * Parameters are optional,request can include one or more parameters to filter the results.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} zOSMFVersion - the URI path that identifies the version of the provisioning service.
     * @param {string} workflowName - the URI path with optional parameter for listing filtered workflows.
     * @param {string} category - the URI path with optional parameter for listing filtered workflows.
     * @param {string} system - the URI path with optional parameter for listing filtered workflows.
     * @param {string} owner - the URI path with optional parameter for listing filtered workflows.
     * @param {string} vendor - the URI path with optional parameter for listing filtered workflows.
     * @param {string} statusName - the URI path with optional parameter for listing filtered workflows.
     * @returns {string} z/OSMF response object
     * @memberof ListWorkflows
     */
    static listWorkflows(session: AbstractSession, zOSMFVersion?: string, workflowName?: string, category?: string, system?: string, owner?: string, vendor?: string, statusName?: string): Promise<{}>;
    /**
     * This operation Builds URI path from provided parameters.
     * @param {string} zOSMFVersion - the URI path that identifies the version of the provisioning service.
     * @param {string} params - The array with URI path with filters for listing filtered workflows.
     * @returns {string} URI path for the REST call.
     * @memberof ListWorkflows
     */
    static getResourcesQuery(zOSMFVersion: string, params: Array<{
        key: string;
        value: string;
    }>): string;
    /**
     * This operation is used to return a worflow-key by given workflow name.
     * @param {AbstractSession} session - z/OSMF connection info
     * @param {string} workflowName - workflow name by which to list workflows
     * @param {string} zOSMFVersion - identifies the version of the provisioning service.
     * @returns {Promise<string> | null} - Promise with string containing wf key, or null if none was found
     * @throws {ImperativeError}
     * @memberof ListWorkflows
     */
    static getWfKey(session: AbstractSession, workflowName: string, zOSMFVersion?: string): Promise<string> | null;
}
