"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const rest_1 = require("../../../rest");
const WorkflowValidator_1 = require("./WorkflowValidator");
const imperative_1 = require("@zowe/imperative");
const WorkflowConstants_1 = require("./WorkflowConstants");
class ListArchivedWorkflows {
    static listArchivedWorkflows(session, zOSMFVersion = WorkflowConstants_1.WorkflowConstants.ZOSMF_VERSION) {
        return __awaiter(this, void 0, void 0, function* () {
            WorkflowValidator_1.WorkflowValidator.validateSession(session);
            WorkflowValidator_1.WorkflowValidator.validateNotEmptyString(zOSMFVersion, WorkflowConstants_1.nozOSMFVersion.message);
            const resourcesQuery = `${WorkflowConstants_1.WorkflowConstants.RESOURCE}/${zOSMFVersion}/${WorkflowConstants_1.WorkflowConstants.ARCH_WORKFLOW_RESOURCE}`;
            return rest_1.ZosmfRestClient.getExpectJSON(session, resourcesQuery, [imperative_1.Headers.APPLICATION_JSON]);
        });
    }
}
exports.ListArchivedWorkflows = ListArchivedWorkflows;
//# sourceMappingURL=ListArchivedWorkflows.js.map