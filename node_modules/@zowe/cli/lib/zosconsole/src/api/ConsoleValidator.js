"use strict";
/*
* This program and the accompanying materials are made available under the terms of the
* Eclipse Public License v2.0 which accompanies this distribution, and is available at
* https://www.eclipse.org/legal/epl-v20.html
*
* SPDX-License-Identifier: EPL-2.0
*
* Copyright Contributors to the Zowe Project.
*
*/
Object.defineProperty(exports, "__esModule", { value: true });
const imperative_1 = require("@zowe/imperative");
const ConsoleConstants_1 = require("./ConsoleConstants");
/**
 * Class validates parameters for console commands
 * @export
 * @class ConsoleValidator
 */
class ConsoleValidator {
    /**
     * Validate supplied parameters
     * @static
     * @param {AbstractSession} session representing connection to this api
     * @param {string} consoleName name of the EMCS console that is used to issue the command
     * @param {IZosmfIssueParms} commandParms synchronous console issue parameters, @see {IZosmfIssueParms}
     * @memberof
     */
    static validateCommonParms(session, consoleName, commandParms) {
        this.validateSession(session);
        this.validateConsoleName(consoleName);
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(commandParms, ConsoleConstants_1.noZosmfInput.message);
    }
    /**
     * Validate supplied parameters
     * @static
     * @param {AbstractSession} session representing connection to this api
     * @param {IIssueParms} parms console issue parameters, @see {IIssueParms}
     * @memberof ConsoleValidator
     */
    static validateIssueParms(session, parms) {
        this.validateSession(session);
        this.validateIssueParm(parms);
    }
    /**
     * Validate supplied parameters
     * @static
     * @param {AbstractSession} session representing connection to this api
     * @param {string} theCommand command to issue
     * @memberof ConsoleValidator
     */
    static validateIssueSimpleParms(session, theCommand) {
        this.validateSession(session);
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(theCommand, ConsoleConstants_1.noConsoleInput.message);
    }
    /**
     * Validate supplied parameters
     * @static
     * @param {ICollectParms} parms console collect parameters, @see {ICollectParms}
     * @memberof ConsoleValidator
     */
    static validateCollectParm(parms) {
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(parms, ConsoleConstants_1.noCollectParameters.message);
    }
    /**
     * Validate supplied parameters
     * @static
     * @param {IIssueParms} parms console issue parameters, @see {IIssueParms}
     * @memberof ConsoleValidator
     */
    static validateIssueParm(parms) {
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(parms, ConsoleConstants_1.noConsoleInput.message);
    }
    /**
     * Validate supplied parameters
     * @static
     * @param {AbstractSession} session representing connection to this api
     * @param {string} consoleName name of the EMCS console that is used to issue the command
     * @param {string} commandResponseKey command response key from the Issue Command request
     * @memberof ConsoleValidator
     */
    static validateCollectCommonParms(session, consoleName, commandResponseKey) {
        this.validateSession(session);
        this.validateConsoleName(consoleName);
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(commandResponseKey, ConsoleConstants_1.noCommandKey.message);
    }
    /**
     * Validate supplied parameters
     * @static
     * @param {AbstractSession} session representing connection to this api
     * @param {ICollectParms} parms console collect parameters, @see {ICollectParms}
     * @memberof ConsoleValidator
     */
    static validateCollectParms(session, parms) {
        this.validateSession(session);
        this.validateCollectParm(parms);
    }
    /**
     * Validate session
     * @static
     * @param {AbstractSession} session representing connection to this api
     * @memberof ConsoleValidator
     */
    static validateSession(session) {
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(session, imperative_1.TextUtils.formatMessage(ConsoleConstants_1.noSession.message));
    }
    /**
     * Validate console name
     * @static
     * @param {string} consoleName
     * @memberof ConsoleValidator
     */
    static validateConsoleName(consoleName) {
        imperative_1.ImperativeExpect.toNotBeNullOrUndefined(consoleName, ConsoleConstants_1.noConsoleName.message);
    }
}
exports.ConsoleValidator = ConsoleValidator;
//# sourceMappingURL=ConsoleValidator.js.map